{"version":3,"sources":["Events.js","Component/Header.js","Component/Cards.js","Component/Table.js","Component/Launch/LaunchPatient.js","App.js","reportWebVitals.js","index.js"],"names":["Events","props","FHIR","oauth2","authorize","client_id","scope","iss","redirectUri","catch","console","error","client","ready","then","patient","request","pageLimit","flat","res","SetAppState","Loading","Oauth2","Patient","routeChange","newPage","Cerner","forEach","entry","PrevScope","includes","resourceType","state","Page","response","newRes","addEntry","status","verificationStatus","substance","code","text","push","Property","Value","thead","observation","condition","medicationstatement","allergyintolerance","relatedperson","tbody","issued","Date","report","value","system","getPath","addReport","addQty","addUnit","absentReport","context","toDateString","category","index","recorded","dateRecorded","onset","onsetDateTime","abatement","display","clinicalStatus","medication","taken","start","end","allergy","criticality","maritalStatus","birthDate","id","officialName","name","gender","capitalize","str","toUpperCase","substring","date","array","find","arrayRecord","use","given","join","family","returnStr","out","checkSys","c","SubHeader","log","Container","noGutter","fluid","Card","style","margin","Body","padding","justifyContent","alignItems","Title","Subtitle","ListGroup","className","flexDirection","ListGroupItem","border","Nav","Item","Link","as","NavLink","to","onClick","MainIndex","AccountIndex","DisplayCount","DisplayIndex","PageArray","map","option","i","PageIndex","path","PageType","label","NavDropdown","title","CurrentPage","Header","Navbar","Brand","AllOptions","Divider","Cards","RedirectRoute","TableFooter","disabled","type","onChange","event","target","onKeyPress","key","Pages","length","Table","Display","Type","Math","ceil","toLowerCase","SetParentState","App","Dropdown","MainArray","AccountArray","bind","this","setState","MainLabels","AccountLabels","concat","basename","GetHeader","exact","LaunchPatient","React","Component","includedAccount","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.411c23ac.chunk.js","sourcesContent":["import FHIR from 'fhirclient';\nimport { getPath } from 'fhirclient/lib/lib';\n\nconst Events = {};\n\n// Launch Events\n\nEvents.patient = (props) => {\n    FHIR.oauth2.authorize({\n        client_id: \"efef2e22-0d52-4bfa-ab53-b44456625f2a\",\n        scope: \"user/Patient.read user/Person.read user/Practitioner.read user/RelatedPerson.read patient/AllergyIntolerance.read patient/Condition.read patient/MedicationStatement.read patient/Observation.read patient/Patient.read patient/Person.read patient/RelatedPerson.read launch/patient online_access openid profile\",\n        iss: \"https://fhir-myrecord.cerner.com/dstu2/ec2458f2-1e24-41c8-b71b-0e701af7583d\",\n        redirectUri: \"https://danielmoffitt54.github.io/UMX-DX/\"\n    }).catch(console.error);\n}\n\n// Client Events\nEvents.client = {};\n\nEvents.client.ready = (props) => {\n    // Using the values from the authorize return, perform a request using the props Param value.\n    // Then always set loading state to false, and if successful set Oauth2 to the authorize return and Cerner to the request return.\n    FHIR.oauth2.ready()\n        .then(client => {\n            client.patient.request(\"Patient\", {\n                pageLimit: 0,\n                flat: true\n            }).then(res => {\n                props.SetAppState({ Loading: false, Oauth2: client, Patient: res[0] });\n            }).catch(() => props.SetAppState({ Loading: false }));\n        }).catch(() => props.SetAppState({ Loading: false }));\n}\n\nEvents.client.routeChange = (props) => {\n    // Test to see if the current Cerner state has another route's resource type.\n    // If so, update the Cerner state.\n    let newPage = false;\n    props.Cerner.forEach(entry => {\n        if (props.PrevScope.includes(entry.resourceType)) newPage = true;\n    });\n    if (newPage) {\n        props.SetAppState({ Loading: true });\n        Events.client.request(props);\n    }\n}\n\nEvents.client.request = (props) => {\n    // Using the current Oauth2 state, perform a request for the route's array at a certain index.\n    // Then update the Cerner state, the route's index state, and reset the current display back to 0.\n    const client = FHIR.client(props.Oauth2.state);\n    client.patient.request(props.Page, {\n        pageLimit: 0,\n        flat: true\n    })\n        .then(response => {\n            const newRes = [];\n            let addEntry = true;\n            response.forEach(res => {\n                switch (true) {\n                    default:\n                        addEntry = true;\n                        break;\n                    case (res.status && res.status === \"entered-in-error\"):\n                    case (res.verificationStatus && res.verificationStatus === \"entered-in-error\"):\n                    case (res.substance && res.substance === \"Entered In Error\"):\n                    case (res.code && res.code.text === \"Entered In Error\"):\n                        addEntry = false;\n                        break;\n                }\n                if (addEntry) newRes.push(res);\n            });\n            props.SetAppState({ Loading: false, Cerner: newRes, [props.Property]: props.Value, CurrentPage: 1, DisplayIndex: 0 });\n        }).catch(() => props.SetAppState({ Loading: false, [props.Property]: props.Value, CurrentPage: 1, DisplayIndex: 0 }));\n}\n\n// Table Head Events\nEvents.thead = {};\n\nEvents.thead.observation = () => {\n    return <tr>\n        <th>Issued Date</th>\n        <th>Category</th>\n        <th>Report</th>\n        <th>Context</th>\n        <th>Status</th>\n    </tr>\n}\n\nEvents.thead.condition = () => {\n    return <tr>\n        <th>Patient</th>\n        <th>Category</th>\n        <th>Report</th>\n        <th>Verification Status</th>\n        <th>Clinical Status</th>\n        <th>Recorded</th>\n        <th>Dates</th>\n    </tr>\n}\n\nEvents.thead.medicationstatement = () => {\n    return <tr>\n        <th>Recorder</th>\n        <th>Patient</th>\n        <th>Medication</th>\n        <th>Dosage</th>\n        <th>Status</th>\n        <th>Taken</th>\n        <th>Dates</th>\n    </tr>\n}\n\nEvents.thead.allergyintolerance = () => {\n    return <tr>\n        <th>Recorder</th>\n        <th>Patient</th>\n        <th>Category</th>\n        <th>Substance</th>\n        <th>Criticality</th>\n        <th>Status</th>\n    </tr>\n}\n\nEvents.thead.patient = () => {\n    return <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Gender</th>\n        <th>Birth Date</th>\n        <th>Marital Status</th>\n    </tr>\n}\n\nEvents.thead.relatedperson = () => {\n    return <tr>\n        <th>Patient</th>\n        <th>Person</th>\n        <th>Gender</th>\n        <th>Birth Date</th>\n    </tr>\n}\n\n// Table Body Events\nEvents.tbody = {};\n\nEvents.tbody.observation = (props) => {\n    const issued = new Date(props.entry.issued),\n        report = Events.value.system(getPath(props.entry, \"code.coding\"), \"http://snomed.info/sct\", getPath(props.entry, \"code.text\") || \"Report Error\"),\n        addReport = Events.value.system(getPath(props.entry ,\"valueCodeableConcept.coding\"), \"http://snomed.info/sct\", getPath(props.entry, \"valueCodeableConcept.text\") || \"N/A\"),\n        addQty = getPath(props.entry, \"valueQuantity.value\") || \"N/A\",\n        addUnit = getPath(props.entry, \"valueQuantity.unit\") || \"N/A\",\n        absentReport = Events.value.system(getPath(props.entry, \"dataAbsentReason.coding\"), \"http://hl7.org/fhir/data-absent-reason\", getPath(props.entry, \"dataAbsentReason.text\") || \"Absent Report\");\n\n    let context = addReport;\n    if (addQty !== \"N/A\") context = addQty;\n    if (addQty !== \"N/A\" && addUnit !== \"N/A\") context = `${addQty} ${addUnit}`;\n\n    return <tr key={props.index}>\n        <td>{issued.toDateString() || \"N/A\"}</td>\n        <td>{props.entry.category.text || \"N/A\"}</td>\n        <td>{props.entry.absentReport ? absentReport : report }</td>\n        <td>{context}</td>\n        <td>{props.entry.status || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.condition = (props) => {\n    const recorded = new Date(props.entry.dateRecorded),\n        onset = new Date(props.entry.onsetDateTime),\n        abatement = new Date(props.entry.onsetDateTime);\n\n    return <tr key={props.index}>\n        <td>{props.entry.patient.display || \"N/A\"}</td>\n        <td>{props.entry.category.text || \"N/A\"}</td>\n        <td>{props.entry.code.text || \"N/A\"}</td>\n        <td>{props.entry.verificationStatus || \"N/A\"}</td>\n        <td>{props.entry.clinicalStatus || \"N/A\"}</td>\n        <td>{recorded.toDateString() || \"N/A\"}</td>\n        <td>{abatement === \"Invalid Date\" ? `${onset.toDateString()} - Present` : `${onset.toDateString()} - ${abatement.toDateString()}` || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.medicationstatement = (props) => {\n    const medication = Events.value.system(getPath(props.entry, \"medicationCodeableConcept.coding\") || getPath(props.entry, \"medicationCodeableConcept.code.coding\"), \"http://www.nlm.nih.gov/research/umls/rxnorm\", getPath(props.entry, \"medicationCodeableConcept.text\") || \"Unnamed Medication(TM)\"),\n        taken = getPath(props.entry, \"wasNotTaken\") ? \"No\" : \"Yes\",\n        start = new Date(getPath(props.entry, \"effectivePeriod.start\")),\n        end = new Date(getPath(props.entry, \"effectivePeriod.end\"));\n\n    return <tr key={props.index}>\n        <td>{getPath(props.entry, \"informationSource.display\") || \"N/A\"}</td>\n        <td>{props.entry.patient.display || \"N/A\"}</td>\n        <td>{medication || \"N/A\"}</td>\n        <td>{getPath(props.entry, \"dosage.0.text\") || \"N/A\"}</td>\n        <td>{props.entry.status || \"N/A\"}</td>\n        <td>{taken || \"N/A\"}</td>\n        <td>{end === \"Invalid Date\" ? `${start.toDateString()} - Present` : `${start.toDateString()} - ${end.toDateString()}` || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.allergyintolerance = (props) => {\n    const allergy = Events.value.system(getPath(props.entry, \"substance.coding\") || getPath(props.entry, \"substance.code.coding\"), \"http://snomed.info/sct\", props.entry.substance.text || \"Unnamed Allergy\"),\n        criticality = props.entry.criticality === \"CRITH\" ? \"High Risk\" : \"None\";\n\n    return <tr>\n        <td>{getPath(props.entry, \"recorder.display\") || \"N/A\"}</td>\n        <td>{getPath(props.entry, \"patient.display\") || \"N/A\"}</td>\n        <td>{props.entry.category || \"N/A\"}</td>\n        <td>{allergy || \"N/A\"}</td>\n        <td>{criticality || \"N/A\"}</td>\n        <td>{props.entry.status || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.patient = (props) => {\n    const maritalStatus = Events.value.system(getPath(props.entry, \"maritalStatus.coding\") || getPath(props.entry, \"maritalStatus.code.coding\"), \"http://hl7.org/fhir/v3/Marital\", props.entry.maritalStatus.text || \"Unavailable\"),\n        birthDate = new Date(props.entry.birthDate);\n\n    return <tr key={props.index}>\n        <td>{props.entry.id || \"N/A\"}</td>\n        <td>{Events.value.officialName(props.entry.name)}</td>\n        <td>{props.entry.gender || \"N/A\"}</td>\n        <td>{birthDate.toDateString() || \"N/A\"}</td>\n        <td>{maritalStatus || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.relatedperson = (props) => {\n    const birthDate = new Date(props.entry.birthDate);\n\n    return <tr key={props.index}>\n        <td>{props.entry.patient.display || \"N/A\"}</td>\n        <td>{props.entry.name.text || \"N/A\"}</td>\n        <td>{props.entry.gender || \"N/A\"}</td>\n        <td>{birthDate.toDateString() || \"N/A\"}</td>\n    </tr>\n}\n\n// Value Events\nEvents.value = {};\n\nEvents.value.capitalize = (str) => {\n    return str[0].toUpperCase() + str.substring(1);\n}\n\nEvents.value.date = (str) => {\n    const date = new Date(str);\n    if (date) return date.toDateString();\n    return str;\n}\n\nEvents.value.officialName = (array = []) => {\n    let entry = array.find(arrayRecord => arrayRecord.use === \"official\") || array[0];\n    if (entry) return entry.given.join(\" \") + \" \" + entry.family;\n    return \"N/A\";\n}\n\nEvents.value.system = (array = [], system, returnStr) => {\n    let out = returnStr || 'N/A';\n    const checkSys = array.find(c => c.system === system);\n    if (checkSys && checkSys.display) {\n        out = checkSys.display;\n    }\n    return out;\n}\n\nexport default Events;","import { NavLink } from 'react-router-dom';\nimport {\n    Navbar,\n    Nav,\n    NavDropdown,\n    Container,\n    Card,\n    ListGroup,\n    ListGroupItem\n} from 'react-bootstrap';\nimport Events from '../Events';\n\nconst Header = (props) => {\n    \n    return <Container fluid>\n        {!props.Oauth2 ? (\n            <Navbar style={{ justifyContent: 'space-between' }}>\n                <Navbar.Brand\n                    as={NavLink}\n                    to=\"/\"\n                    onClick={() => props.SetAppState({\n                        Cerner: null,\n                        MainIndex: 0,\n                        AccountIndex: 0,\n                        DisplayCount: 25,\n                        DisplayIndex: 0\n                    })}\n                >UMX-DX App</Navbar.Brand>\n                <NavDropdown\n                    title=\"Login\"\n                    id=\"navbarScrollingDropdown\"\n                >\n                    <NavDropdown.Item as={NavLink} to=\"/launch-patient\">Patient</NavDropdown.Item>\n                </NavDropdown>\n            </Navbar>\n        ) : (\n            <Navbar style={{ justifyContent: 'space-between' }}>\n                <Navbar.Brand\n                    as={NavLink}\n                    to=\"/\"\n                    onClick={() => props.SetAppState({\n                        Cerner: null,\n                        MainIndex: 0,\n                        AccountIndex: 0,\n                        DisplayCount: 25,\n                        DisplayIndex: 0\n                    })}\n                >UMX-DX App</Navbar.Brand>\n                <NavDropdown\n                    title=\"Menu\"\n                    id=\"navbarScrollingDropdown\"\n                >\n                    {props.AllOptions.map((option, i) => {\n                        return <NavDropdown.Item \n                            key={i}\n                            as={NavLink}\n                            to={option.path}\n                            onClick={() => {\n                                props.SetAppState({ Loading: true });\n                                Events.client.request({\n                                    Oauth2: props.Oauth2,\n                                    Page: option.value,\n                                    Property: `${props.PageType}Index`,\n                                    Value: i,\n                                    SetAppState: props.SetAppState\n                                });\n                            }}\n                        >{option.label}</NavDropdown.Item>\n                    })}\n                    <NavDropdown.Divider />\n                    <NavDropdown.Item\n                        as={NavLink}\n                        to=\"/\" \n                        onClick={() => props.SetAppState({\n                            Oauth2: null,\n                            Patient: null,\n                            Cerner: null,\n                            MainIndex: 0,\n                            AccountIndex: 0,\n                            DisplayCount: 25,\n                            DisplayIndex: 0\n                        })}\n                    >Log Out</NavDropdown.Item>\n                </NavDropdown>\n            </Navbar>\n        )}\n        {SubHeader(props)}\n    </Container>\n};\n\nfunction SubHeader(props) {\n\n    if (!props.Patient && !props.Cerner) return\n    if (props.Patient) console.log('Patient: ', props.Patient);\n\n    return <Container \n        noGutter\n        fluid\n    >\n        {props.Patient ? (\n            <Card style={{ margin: '0 0 5px 0' }}>\n                <Card.Body  style={{ \n                    padding: '10px',\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center' \n                }}>\n                    <div>\n                        <Card.Title style={{ margin: '0' }}>{Events.value.officialName(props.Patient.name)}</Card.Title>\n                        <Card.Subtitle style={{ margin: '0' }}>{`ID: ${props.Patient.id}`}</Card.Subtitle>\n                    </div>\n                    <ListGroup \n                        className=\"list-group-flush\"\n                        style={{ flexDirection: \"row\" }}>\n                        <ListGroupItem style={{ border: 'none' }}>{`Gender: ${Events.value.capitalize(props.Patient.gender)}`}</ListGroupItem>\n                        <ListGroupItem>{`DoB: ${Events.value.date(props.Patient.birthDate)}`}</ListGroupItem>\n                    </ListGroup>\n                </Card.Body>\n            </Card>\n        ) : null }\n        {props.Cerner ? (\n            <Nav style={{ justifyContent: \"center\", alignItems: \"center\" }}>\n                <Nav.Item>\n                    <Nav.Link \n                        as={NavLink}\n                        to=\"/\" \n                        onClick={() => props.SetAppState({\n                            Cerner: null,\n                            MainIndex: 0,\n                            AccountIndex: 0,\n                            DisplayCount: 25,\n                            DisplayIndex: 0\n                        })}\n                    >Back</Nav.Link>\n                </Nav.Item>\n                {props.PageArray.map((option, i) => {\n                    if (props.PageIndex === i) return <Nav.Item>\n                        <Nav.Link key={i} \n                            as={NavLink}\n                            to={option.path}\n                            onClick={() => {\n                                props.SetAppState({ Loading: true });\n                                Events.client.request({\n                                    Oauth2: props.Oauth2,\n                                    Page: option.value,\n                                    Property: `${props.PageType}Index`,\n                                    Value: i,\n                                    SetAppState: props.SetAppState\n                                });\n                            }}\n                        >{option.label}</Nav.Link>\n                    </Nav.Item>\n                    return <Nav.Item>\n                        <Nav.Link key={i} \n                            as={NavLink}\n                            to={option.path}\n                            onClick={() => {\n                                props.SetAppState({ Loading: true });\n                                Events.client.request({\n                                    Oauth2: props.Oauth2,\n                                    Page: option.value,\n                                    Property: `${props.PageType}Index`,\n                                    Value: i,\n                                    SetAppState: props.SetAppState\n                                });\n                            }}\n                        >{option.label}</Nav.Link>\n                    </Nav.Item>\n                })}\n                <Nav.Item>\n                    <Nav.Link\n                        as={NavDropdown}\n                        title={`Count: ${props.DisplayCount}`}\n                        id=\"navbarScrollingDropdown\"\n                    >\n                        <NavDropdown.Item\n                            onClick={() => props.SetAppState({ DisplayCount: 25, CurrentPage: 1, DisplayIndex: 0 })}\n                        >25</NavDropdown.Item>\n                        <NavDropdown.Item\n                            onClick={() => props.SetAppState({ DisplayCount: 50, CurrentPage: 1, DisplayIndex: 0 })}\n                        >50</NavDropdown.Item>\n                        <NavDropdown.Item\n                            onClick={() => props.SetAppState({ DisplayCount: 100, CurrentPage: 1, DisplayIndex: 0 })}\n                        >100</NavDropdown.Item>\n                    </Nav.Link>\n                </Nav.Item>\n            </Nav>\n        ) : null }\n    </Container>\n\n}\n\nexport default Header;","import { NavLink } from 'react-router-dom';\nimport {\n    Container,\n    Card\n} from 'react-bootstrap';\n\nconst Cards = (props) => {\n\n    return <Container>\n        {props.AllOptions.map((option, i) => {\n            return <Card>\n                <NavLink key={i} \n                    to={option.path}\n                    onClick={() => props.RedirectRoute({\n                        option: option,\n                        index: i\n                    })}\n                >{option.label}</NavLink>\n            </Card>\n        })}\n    </Container>\n}\n\nexport default Cards;","import Events from \"../Events\";\n\nconst Table = (props) => {\n    const Display = [];\n    let Type = null,\n        Pages = Math.ceil(props.Cerner.length / props.DisplayCount);\n\n    if (props.Cerner[0].resourceType) Type = props.Cerner[0].resourceType.toLowerCase();\n\n    // For each entry, see if value has entered-in-error and if not add entry to display...\n    // then set up pages to be viewed.\n    for (let i = 0; i < props.Cerner.length && Display.length < props.DisplayCount; i++) {\n        if (i >= props.DisplayIndex) Display.push(props.Cerner[i]);\n    }\n\n    if (Display.length > 0) console.log(\"Display: \", Display);\n\n    return <div className=\"App-Table\">\n        <table className=\"Table\">\n            <thead>\n                {Events.thead[Type]()}\n            </thead>\n            <tbody>\n                {Display.map((entry, index) => {\n                    return Events.tbody[Type]({\n                        index: index,\n                        entry: entry\n                    });\n                })}\n            </tbody>\n        </table>\n        {Pages > 1 ? (\n            <TableFooter \n                Cerner={props.Cerner}\n                Pages={Pages}\n                DisplayCount={props.DisplayCount}\n                DisplayIndex={props.DisplayIndex}\n                CurrentPage={props.CurrentPage}\n                SetAppState={props.SetAppState}\n                SetParentState={props.SetParentState}\n            />\n        ) : null}\n    </div>\n}\n\nfunction TableFooter(props) {\n    return <div className=\"Footer-Nav\">\n        <div>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: 1, DisplayIndex: 0 })}\n                disabled={props.CurrentPage <= 1}\n            >First</button>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: props.CurrentPage - 1, DisplayIndex: props.DisplayIndex - props.DisplayCount })}\n                disabled={props.CurrentPage <= 1}\n            >Prev</button>\n        </div>\n        <div className=\"Footer-Nav-Link\">\n            <label className=\"Footer-Label\">\n                <input \n                    className=\"Footer-Input\"\n                    type=\"text\" \n                    value={props.CurrentPage}\n                    onChange={event => props.SetAppState({ CurrentPage: event.target.value })}\n                    onKeyPress={event => {\n                        if (event.key === \"Enter\") {\n                            if (props.CurrentPage <= 1) {\n                                props.SetAppState({ DisplayIndex: 0 });\n                                return props.SetAppState({ CurrentPage: 1 });\n                            }\n                            if (props.CurrentPage >= props.Pages) {\n                                props.SetAppState({ DisplayIndex: props.Cerner.length - props.DisplayCount });\n                                return props.SetAppState({ CurrentPage: props.Pages });\n                            }\n                            props.SetAppState({ DisplayIndex: props.DisplayCount * (props.CurrentPage - 1) });\n                        }\n                    }}\n                ></input>\n                {`/${props.Pages}`}\n            </label>\n        </div>\n        <div>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: props.CurrentPage + 1, DisplayIndex: props.DisplayIndex + props.DisplayCount })}\n                disabled={props.CurrentPage >= props.Pages}\n            >Next</button>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: props.Pages, DisplayIndex: props.DisplayCount * (props.Pages - 1) })}\n                disabled={props.CurrentPage >= props.Pages}\n            >Last</button>\n        </div>\n    </div>\n}\n\nexport default Table;","import Events from '../../Events';\n\nconst Patient = () => {\n\n    Events.patient();\n    return <div className=\"App-Launch\">\n        <h1>Please wait...</h1>\n    </div>\n};\n\n\nexport default Patient;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\nimport Events from './Events';\nimport Header from './Component/Header';\nimport Cards from './Component/Cards';\nimport Table from './Component/Table';\nimport LaunchPatient from './Component/Launch/LaunchPatient';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Loading: false,\n      Dropdown: null,\n      Oauth2: null,\n      Patient: null,\n      Cerner: null,\n      CurrentPage: 0,\n      DisplayIndex: 0,\n      DisplayCount: 25,\n      MainIndex: 0,\n      MainArray: [\n        { \n          label: \"Observations\",\n          value: \"Observation\",\n          path: \"/observations\"\n        } , {\n          label: \"Conditions\",\n          value: \"Condition\",\n          path: \"/conditions\"\n        } , {\n          label: \"Medications\",\n          value: \"MedicationStatement\",\n          path: \"/medications\"\n        } , {\n          label: \"Allergies\",\n          value: \"AllergyIntolerance\",\n          path: \"/allergies\"\n        }\n      ],\n      AccountIndex: 0,\n      AccountArray: [\n        { \n          label: \"Account\",\n          value: \"Patient\",\n          path: \"/account\"\n        } , {\n          label: \"Relatives\",\n          value: \"RelatedPerson\",\n          path: \"/relatives\"\n        }\n      ]\n    }\n    this.SetAppState = this.SetAppState.bind(this);\n    this.RedirectRoute = this.RedirectRoute.bind(this);\n  }\n\n  SetAppState(event) {\n    this.setState(event);\n  }\n\n  RedirectRoute(props) {\n    const MainLabels = [],\n      AccountLabels = [],\n      { Oauth2, MainArray, AccountArray } = this.state;\n\n    MainArray.forEach(option => MainLabels.push(option.label));\n    AccountArray.forEach(option => AccountLabels.push(option.label));\n\n    this.setState({ Loading: true });\n    if (AccountLabels.includes(props.option.label)) {\n      Events.client.request({\n        Oauth2: Oauth2,\n        Page: props.option.value,\n        Property: \"AccountIndex\",\n        Value: props.index,\n        SetAppState: this.SetAppState\n      });\n    } else {\n      Events.client.request({\n        Oauth2: Oauth2,\n        Page: props.option.value,\n        Property: \"MainIndex\",\n        Value: props.index,\n        SetAppState: this.SetAppState\n      });\n    }\n    <Redirect to={props.option.path}/>\n  }\n\n  componentDidMount() {\n    const { Cerner } = this.state;\n    if (!Cerner) {\n      Events.client.ready({\n        SetAppState: this.SetAppState\n      });\n      this.setState({ Loading: true });\n    }\n  }\n\n  render() {\n    const {\n      Loading,\n      Dropdown,\n      Oauth2,\n      Patient,\n      Cerner,\n      CurrentPage,\n      DisplayIndex,\n      DisplayCount,\n      MainIndex,\n      MainArray,\n      AccountIndex,\n      AccountArray,\n    } = this.state,\n      AllOptions = MainArray.concat(AccountArray);\n\n    if (Cerner) console.log(\"Cerner: \", Cerner);\n\n    return <div className=\"App\">\n      <Router basename=\"/UMX-DX\">\n        <GetHeader \n          AllOptions={AllOptions}\n          Dropdown={Dropdown}\n          Oauth2={Oauth2}\n          Patient={Patient}\n          Cerner={Cerner}\n          CurrentPage={CurrentPage}\n          DisplayIndex={DisplayIndex}\n          DisplayCount={DisplayCount}\n          MainIndex={MainIndex}\n          MainArray={MainArray}\n          AccountIndex={AccountIndex}\n          AccountArray={AccountArray}\n          SetAppState={this.SetAppState}\n        />\n        <Switch>\n          <Route exact path='/'>\n            {Loading ? (\n              <div className=\"App-Loading\">\n                <h1>Please wait...</h1>\n              </div>\n            ) : (\n              !Oauth2 ? (\n                <div className=\"App-Login\">\n                  <h1>Please Login to Continue</h1>\n                </div>\n              ) : null\n            )}\n          </Route>\n          {AllOptions.map((option, index) => {\n            return <Route key={index} path={option.path}>\n            {Loading ? (\n              <div className=\"App-Loading\">\n                <h1>Please wait...</h1>\n              </div>\n            ) : (\n              !Cerner || Cerner.length === 0 ? (\n                  <div className=\"App-Error\">\n                    <h1>Error Retrieveing Data</h1>\n                  </div>\n              ) : (\n                <Table\n                  Cerner={Cerner}\n                  DisplayCount={DisplayCount}\n                  DisplayIndex={DisplayIndex}\n                  CurrentPage={CurrentPage}\n                  SetAppState={this.SetAppState}\n                />\n              )\n            )}\n            </Route>\n          })}\n          {!Oauth2 ? (\n            <>\n              <Route path=\"/launch-patient\">\n                <LaunchPatient />\n              </Route>\n            </>\n          ) : null }\n        </Switch>\n        {!Loading && Oauth2 ? (\n          <Cards \n            AllOptions={AllOptions}\n            RedirectRoute={this.RedirectRoute}\n          />\n        ) : null }\n      </Router>\n    </div>\n  }\n};\n\nfunction GetHeader(props) {\n  const MainLabels = [],\n    AccountLabels = [];\n  let includedAccount = false;\n\n  props.MainArray.forEach(option => MainLabels.push(option.label));\n  props.AccountArray.forEach(option => {\n    if (props.Cerner && option.value === props.Cerner[0].resourceType) includedAccount = true;\n    AccountLabels.push(option.label)\n  });\n\n  switch (true) {\n    case includedAccount:\n      return <Header \n        AllOptions={props.AllOptions}\n        Dropdown={props.Dropdown}\n        Oauth2={props.Oauth2}\n        Patient={props.Patient}\n        Cerner={props.Cerner}\n        CurrentPage={props.CurrentPage}\n        DisplayIndex={props.DisplayIndex}\n        DisplayCount={props.DisplayCount}\n        MainLabels={MainLabels}\n        AccountLabels={AccountLabels}\n        PageType=\"Account\"\n        PageIndex={props.AccountIndex}\n        PageArray={props.AccountArray}\n        SetAppState={props.SetAppState}\n      />\n    default:\n      return <Header \n        AllOptions={props.AllOptions}\n        Dropdown={props.Dropdown}\n        Oauth2={props.Oauth2}\n        Patient={props.Patient}\n        Cerner={props.Cerner}\n        CurrentPage={props.CurrentPage}\n        DisplayIndex={props.DisplayIndex}\n        DisplayCount={props.DisplayCount}\n        MainLabels={MainLabels}\n        AccountLabels={AccountLabels}\n        PageType=\"Main\"\n        PageIndex={props.MainIndex}\n        PageArray={props.MainArray}\n        SetAppState={props.SetAppState}\n      />\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nrequire('./index.scss');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}