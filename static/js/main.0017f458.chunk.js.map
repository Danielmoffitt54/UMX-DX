{"version":3,"sources":["Events.js","Component/Header.js","Component/Cards.js","Component/Table.js","Component/Launch/LaunchPatient.js","Component/Launch/LaunchProvider.js","App.js","reportWebVitals.js","index.js"],"names":["Events","getPatientName","name","entry","find","nameRecord","use","given","join","family","getSystemValue","array","system","str","out","checkSys","c","display","patient","props","FHIR","oauth2","authorize","client_id","scope","iss","redirectUri","catch","console","error","provider","client","ready","then","request","pageLimit","flat","res","SetAppState","Loading","Oauth2","Patient","routeChange","newPage","Cerner","forEach","PrevScope","includes","resourceType","state","Page","response","newRes","addEntry","status","verificationStatus","substance","code","text","push","Property","Value","thead","observation","condition","medicationstatement","allergyintolerance","relatedperson","tbody","issued","Date","report","getPath","addReport","addQty","addUnit","absentReport","context","toDateString","category","index","recorded","dateRecorded","onset","onsetDateTime","abatement","clinicalStatus","medication","taken","start","end","allergy","criticality","maritalStatus","birthDate","id","gender","SubHeader","log","Container","noGutter","fluid","Card","Body","Title","Subtitle","ListGroup","className","ListGroupItem","Nav","style","justifyContent","alignItems","Item","Link","as","NavLink","to","onClick","MainIndex","AccountIndex","DisplayCount","DisplayIndex","PageArray","map","option","i","PageIndex","path","value","PageType","label","NavDropdown","title","CurrentPage","Header","Navbar","Brand","AllOptions","Divider","Cards","RedirectRoute","TableFooter","disabled","type","onChange","event","target","onKeyPress","key","Pages","length","Table","Display","Type","Math","ceil","toLowerCase","SetParentState","PatientWithRouter","withRouter","ProviderWithRouter","App","Dropdown","MainArray","AccountArray","bind","this","setState","MainLabels","AccountLabels","concat","basename","GetHeader","exact","LaunchPatient","LaunchProvider","React","Component","includedAccount","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0017f458.chunk.js","sourcesContent":["import FHIR from 'fhirclient';\nimport { getPath } from 'fhirclient/lib/lib';\n\nconst Events = {};\n\n// Launch Events\n\nEvents.patient = (props) => {\n    FHIR.oauth2.authorize({\n        client_id: \"efef2e22-0d52-4bfa-ab53-b44456625f2a\",\n        scope: \"user/Patient.read user/Person.read user/Practitioner.read user/RelatedPerson.read patient/AllergyIntolerance.read patient/Condition.read patient/MedicationStatement.read patient/Observation.read patient/Patient.read patient/Person.read patient/RelatedPerson.read launch/patient online_access openid profile\",\n        iss: \"https://fhir-myrecord.cerner.com/dstu2/ec2458f2-1e24-41c8-b71b-0e701af7583d\",\n        redirectUri: \"https://danielmoffitt54.github.io/UMX-DX/\"\n    }).catch(console.error);\n}\n\nEvents.provider = (props) => {\n    FHIR.oauth2.authorize({\n        client_id: \"4cfb74e7-deb2-4151-9c22-16eba93fd1ec\",\n        scope: \"user/AllergyIntolerance.read user/Condition.read user/MedicationStatement.read user/Observation.read user/Patient.read user/Person.read user/Practitioner.read user/ProcedureRequest.read launch online_access openid profile\",\n        iss: \"https://fhir-myrecord.cerner.com/dstu2/ec2458f2-1e24-41c8-b71b-0e701af7583d\",\n        redirectUri: \"https://danielmoffitt54.github.io/UMX-DX/\"\n    }).catch(console.error);\n}\n\n// Client Events\nEvents.client = {};\n\nEvents.client.ready = (props) => {\n    // Using the values from the authorize return, perform a request using the props Param value.\n    // Then always set loading state to false, and if successful set Oauth2 to the authorize return and Cerner to the request return.\n    FHIR.oauth2.ready()\n        .then(client => {\n            client.patient.request(\"Patient\", {\n                pageLimit: 0,\n                flat: true\n            }).then(res => {\n                props.SetAppState({ Loading: false, Oauth2: client, Patient: res });\n            }).catch(() => props.SetAppState({ Loading: false }));\n        }).catch(() => props.SetAppState({ Loading: false }));\n}\n\nEvents.client.routeChange = (props) => {\n    // Test to see if the current Cerner state has another route's resource type.\n    // If so, update the Cerner state.\n    let newPage = false;\n    props.Cerner.forEach(entry => {\n        if (props.PrevScope.includes(entry.resourceType)) newPage = true;\n    });\n    if (newPage) {\n        props.SetAppState({ Loading: true });\n        Events.client.request(props);\n    }\n}\n\nEvents.client.request = (props) => {\n    // Using the current Oauth2 state, perform a request for the route's array at a certain index.\n    // Then update the Cerner state, the route's index state, and reset the current display back to 0.\n    const client = FHIR.client(props.Oauth2.state);\n    client.patient.request(props.Page, {\n        pageLimit: 0,\n        flat: true\n    })\n        .then(response => {\n            const newRes = [];\n            let addEntry = true;\n            response.forEach(res => {\n                switch (true) {\n                    default:\n                        addEntry = true;\n                        break;\n                    case (res.status && res.status === \"entered-in-error\"):\n                    case (res.verificationStatus && res.verificationStatus === \"entered-in-error\"):\n                    case (res.substance && res.substance === \"Entered In Error\"):\n                    case (res.code && res.code.text === \"Entered In Error\"):\n                        addEntry = false;\n                        break;\n                }\n                if (addEntry) newRes.push(res);\n            });\n            props.SetAppState({ Loading: false, Cerner: newRes, [props.Property]: props.Value, CurrentPage: 1, DisplayIndex: 0 });\n        }).catch(() => props.SetAppState({ Loading: false, [props.Property]: props.Value, CurrentPage: 1, DisplayIndex: 0 }));\n}\n\n// Table Head Events\nEvents.thead = {};\n\nEvents.thead.observation = () => {\n    return <tr>\n        <th>Issued Date</th>\n        <th>Category</th>\n        <th>Report</th>\n        <th>Context</th>\n        <th>Status</th>\n    </tr>\n}\n\nEvents.thead.condition = () => {\n    return <tr>\n        <th>Patient</th>\n        <th>Category</th>\n        <th>Report</th>\n        <th>Verification Status</th>\n        <th>Clinical Status</th>\n        <th>Recorded</th>\n        <th>Dates</th>\n    </tr>\n}\n\nEvents.thead.medicationstatement = () => {\n    return <tr>\n        <th>Recorder</th>\n        <th>Patient</th>\n        <th>Medication</th>\n        <th>Dosage</th>\n        <th>Status</th>\n        <th>Taken</th>\n        <th>Dates</th>\n    </tr>\n}\n\nEvents.thead.allergyintolerance = () => {\n    return <tr>\n        <th>Recorder</th>\n        <th>Patient</th>\n        <th>Category</th>\n        <th>Substance</th>\n        <th>Criticality</th>\n        <th>Status</th>\n    </tr>\n}\n\nEvents.thead.patient = () => {\n    return <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Gender</th>\n        <th>Birth Date</th>\n        <th>Marital Status</th>\n    </tr>\n}\n\nEvents.thead.relatedperson = () => {\n    return <tr>\n        <th>Patient</th>\n        <th>Person</th>\n        <th>Gender</th>\n        <th>Birth Date</th>\n    </tr>\n}\n\n// Table Body Events\nEvents.tbody = {};\n\nEvents.tbody.observation = (props) => {\n    const issued = new Date(props.entry.issued),\n        report = getSystemValue(getPath(props.entry, \"code.coding\"), \"http://snomed.info/sct\", getPath(props.entry, \"code.text\") || \"Report Error\"),\n        addReport = getSystemValue(getPath(props.entry ,\"valueCodeableConcept.coding\"), \"http://snomed.info/sct\", getPath(props.entry, \"valueCodeableConcept.text\") || \"N/A\"),\n        addQty = getPath(props.entry, \"valueQuantity.value\") || \"N/A\",\n        addUnit = getPath(props.entry, \"valueQuantity.unit\") || \"N/A\",\n        absentReport = getSystemValue(getPath(props.entry, \"dataAbsentReason.coding\"), \"http://hl7.org/fhir/data-absent-reason\", getPath(props.entry, \"dataAbsentReason.text\") || \"Absent Report\");\n\n    let context = addReport;\n    if (addQty !== \"N/A\") context = addQty;\n    if (addQty !== \"N/A\" && addUnit !== \"N/A\") context = `${addQty} ${addUnit}`;\n\n    return <tr key={props.index}>\n        <td>{issued.toDateString() || \"N/A\"}</td>\n        <td>{props.entry.category.text || \"N/A\"}</td>\n        <td>{props.entry.absentReport ? absentReport : report }</td>\n        <td>{context}</td>\n        <td>{props.entry.status || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.condition = (props) => {\n    const recorded = new Date(props.entry.dateRecorded),\n        onset = new Date(props.entry.onsetDateTime),\n        abatement = new Date(props.entry.onsetDateTime);\n\n    return <tr key={props.index}>\n        <td>{props.entry.patient.display || \"N/A\"}</td>\n        <td>{props.entry.category.text || \"N/A\"}</td>\n        <td>{props.entry.code.text || \"N/A\"}</td>\n        <td>{props.entry.verificationStatus || \"N/A\"}</td>\n        <td>{props.entry.clinicalStatus || \"N/A\"}</td>\n        <td>{recorded.toDateString() || \"N/A\"}</td>\n        <td>{abatement === \"Invalid Date\" ? `${onset.toDateString()} - Present` : `${onset.toDateString()} - ${abatement.toDateString()}` || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.medicationstatement = (props) => {\n    const medication = getSystemValue(getPath(props.entry, \"medicationCodeableConcept.coding\") || getPath(props.entry, \"medicationCodeableConcept.code.coding\"), \"http://www.nlm.nih.gov/research/umls/rxnorm\", getPath(props.entry, \"medicationCodeableConcept.text\") || \"Unnamed Medication(TM)\"),\n        taken = getPath(props.entry, \"wasNotTaken\") ? \"No\" : \"Yes\",\n        start = new Date(getPath(props.entry, \"effectivePeriod.start\")),\n        end = new Date(getPath(props.entry, \"effectivePeriod.end\"));\n\n    return <tr key={props.index}>\n        <td>{getPath(props.entry, \"informationSource.display\") || \"N/A\"}</td>\n        <td>{props.entry.patient.display || \"N/A\"}</td>\n        <td>{medication || \"N/A\"}</td>\n        <td>{getPath(props.entry, \"dosage.0.text\") || \"N/A\"}</td>\n        <td>{props.entry.status || \"N/A\"}</td>\n        <td>{taken || \"N/A\"}</td>\n        <td>{end === \"Invalid Date\" ? `${start.toDateString()} - Present` : `${start.toDateString()} - ${end.toDateString()}` || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.allergyintolerance = (props) => {\n    const allergy = getSystemValue(getPath(props.entry, \"substance.coding\") || getPath(props.entry, \"substance.code.coding\"), \"http://snomed.info/sct\", props.entry.substance.text || \"Unnamed Allergy\"),\n        criticality = props.entry.criticality === \"CRITH\" ? \"High Risk\" : \"None\";\n\n    return <tr>\n        <td>{getPath(props.entry, \"recorder.display\") || \"N/A\"}</td>\n        <td>{getPath(props.entry, \"patient.display\") || \"N/A\"}</td>\n        <td>{props.entry.category || \"N/A\"}</td>\n        <td>{allergy || \"N/A\"}</td>\n        <td>{criticality || \"N/A\"}</td>\n        <td>{props.entry.status || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.patient = (props) => {\n    const maritalStatus = getSystemValue(getPath(props.entry, \"maritalStatus.coding\") || getPath(props.entry, \"maritalStatus.code.coding\"), \"http://hl7.org/fhir/v3/Marital\", props.entry.maritalStatus.text || \"Unavailable\"),\n        birthDate = new Date(props.entry.birthDate);\n\n    return <tr key={props.index}>\n        <td>{props.entry.id || \"N/A\"}</td>\n        <td>{getPatientName(props.entry.name) || \"N/A\"}</td>\n        <td>{props.entry.gender || \"N/A\"}</td>\n        <td>{birthDate.toDateString() || \"N/A\"}</td>\n        <td>{maritalStatus || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.relatedperson = (props) => {\n    const birthDate = new Date(props.entry.birthDate);\n\n    return <tr key={props.index}>\n        <td>{props.entry.patient.display || \"N/A\"}</td>\n        <td>{props.entry.name.text || \"N/A\"}</td>\n        <td>{props.entry.gender || \"N/A\"}</td>\n        <td>{birthDate.toDateString() || \"N/A\"}</td>\n    </tr>\n}\n\n// Misc Functions\n\nfunction getPatientName(name = []) {\n    let entry = name.find(nameRecord => nameRecord.use === \"official\") || name[0];\n    if (entry) return entry.given.join(\" \") + \" \" + entry.family;\n    return undefined;\n}\n\nfunction getSystemValue(array = [], system, str) {\n    let out = str;\n    const checkSys = array.find(c => c.system === system);\n    if (checkSys && checkSys.display) {\n        out = checkSys.display;\n    }\n    return out;\n}\n\nexport default Events;","import { NavLink } from 'react-router-dom';\nimport {\n    Navbar,\n    Nav,\n    NavDropdown,\n    Container,\n    Card,\n    ListGroup,\n    ListGroupItem\n} from 'react-bootstrap';\nimport Events from '../Events';\n\nconst Header = (props) => {\n    \n    return <Container fluid>\n        {!props.Oauth2 ? (\n            <Navbar style={{ justifyContent: 'space-between' }}>\n                <Navbar.Brand\n                    as={NavLink}\n                    to=\"/\"\n                    onClick={() => props.SetAppState({\n                        Cerner: null,\n                        MainIndex: 0,\n                        AccountIndex: 0,\n                        DisplayCount: 25,\n                        DisplayIndex: 0\n                    })}\n                >UMX-DX App</Navbar.Brand>\n                <NavDropdown\n                    title=\"Login\"\n                    id=\"navbarScrollingDropdown\"\n                >\n                    <NavDropdown.Item as={NavLink} to=\"/launch-patient\">Patient</NavDropdown.Item>\n                    <NavDropdown.Item as={NavLink} to=\"/launch-provider\">Provider</NavDropdown.Item>\n                </NavDropdown>\n            </Navbar>\n        ) : (\n            <Navbar style={{ justifyContent: 'space-between' }}>\n                <Navbar.Brand\n                    as={NavLink}\n                    to=\"/\"\n                    onClick={() => props.SetAppState({\n                        Cerner: null,\n                        MainIndex: 0,\n                        AccountIndex: 0,\n                        DisplayCount: 25,\n                        DisplayIndex: 0\n                    })}\n                >UMX-DX App</Navbar.Brand>\n                <NavDropdown\n                    title=\"Menu\"\n                    id=\"navbarScrollingDropdown\"\n                >\n                    {props.AllOptions.map((option, i) => {\n                        return <NavDropdown.Item \n                            key={i}\n                            as={NavLink}\n                            to={option.path}\n                            onClick={() => {\n                                props.SetAppState({ Loading: true });\n                                Events.client.request({\n                                    Oauth2: props.Oauth2,\n                                    Page: option.value,\n                                    Property: `${props.PageType}Index`,\n                                    Value: i,\n                                    SetAppState: props.SetAppState\n                                });\n                            }}\n                        >{option.label}</NavDropdown.Item>\n                    })}\n                    <NavDropdown.Divider />\n                    <NavDropdown.Item\n                        as={NavLink}\n                        to=\"/\" \n                        onClick={() => props.SetAppState({\n                            Oauth2: null,\n                            Patient: null,\n                            Cerner: null,\n                            MainIndex: 0,\n                            AccountIndex: 0,\n                            DisplayCount: 25,\n                            DisplayIndex: 0\n                        })}\n                    >Log Out</NavDropdown.Item>\n                </NavDropdown>\n            </Navbar>\n        )}\n        {SubHeader(props)}\n    </Container>\n};\n\nfunction SubHeader(props) {\n\n    if (!props.Patient && !props.Cerner) return\n    if (props.Patient) console.log('Patient: ', props.Patient);\n\n    return <Container \n        noGutter\n        fluid\n    >\n        {props.Patient ? (\n            <Card>\n                <Card.Body>\n                    <Card.Title>Name</Card.Title>\n                    <Card.Subtitle>ID</Card.Subtitle>\n                    <ListGroup className=\"list-group-flush\">\n                        <ListGroupItem>Birth Date</ListGroupItem>\n                        <ListGroupItem>Gender</ListGroupItem>\n                    </ListGroup>\n                </Card.Body>\n            </Card>\n        ) : null }\n        {props.Cerner ? (\n            <Nav style={{ justifyContent: \"center\", alignItems: \"center\" }}>\n                <Nav.Item>\n                    <Nav.Link \n                        as={NavLink}\n                        to=\"/\" \n                        onClick={() => props.SetAppState({\n                            Cerner: null,\n                            MainIndex: 0,\n                            AccountIndex: 0,\n                            DisplayCount: 25,\n                            DisplayIndex: 0\n                        })}\n                    >Back</Nav.Link>\n                </Nav.Item>\n                {props.PageArray.map((option, i) => {\n                    if (props.PageIndex === i) return <Nav.Item>\n                        <Nav.Link key={i} \n                            as={NavLink}\n                            to={option.path}\n                            onClick={() => {\n                                props.SetAppState({ Loading: true });\n                                Events.client.request({\n                                    Oauth2: props.Oauth2,\n                                    Page: option.value,\n                                    Property: `${props.PageType}Index`,\n                                    Value: i,\n                                    SetAppState: props.SetAppState\n                                });\n                            }}\n                        >{option.label}</Nav.Link>\n                    </Nav.Item>\n                    return <Nav.Item>\n                        <Nav.Link key={i} \n                            as={NavLink}\n                            to={option.path}\n                            onClick={() => {\n                                props.SetAppState({ Loading: true });\n                                Events.client.request({\n                                    Oauth2: props.Oauth2,\n                                    Page: option.value,\n                                    Property: `${props.PageType}Index`,\n                                    Value: i,\n                                    SetAppState: props.SetAppState\n                                });\n                            }}\n                        >{option.label}</Nav.Link>\n                    </Nav.Item>\n                })}\n                <Nav.Item>\n                    <Nav.Link\n                        as={NavDropdown}\n                        title={`Count: ${props.DisplayCount}`}\n                        id=\"navbarScrollingDropdown\"\n                    >\n                        <NavDropdown.Item\n                            onClick={() => props.SetAppState({ DisplayCount: 25, CurrentPage: 1, DisplayIndex: 0 })}\n                        >25</NavDropdown.Item>\n                        <NavDropdown.Item\n                            onClick={() => props.SetAppState({ DisplayCount: 50, CurrentPage: 1, DisplayIndex: 0 })}\n                        >50</NavDropdown.Item>\n                        <NavDropdown.Item\n                            onClick={() => props.SetAppState({ DisplayCount: 100, CurrentPage: 1, DisplayIndex: 0 })}\n                        >100</NavDropdown.Item>\n                    </Nav.Link>\n                </Nav.Item>\n            </Nav>\n        ) : null }\n    </Container>\n\n}\n\nexport default Header;","import { NavLink } from 'react-router-dom';\nimport {\n    Container,\n    Card\n} from 'react-bootstrap';\n\nconst Cards = (props) => {\n\n    return <Container>\n        {props.AllOptions.map((option, i) => {\n            return <Card>\n                <NavLink key={i} \n                    to={option.path}\n                    onClick={() => props.RedirectRoute({\n                        option: option,\n                        index: i\n                    })}\n                >{option.label}</NavLink>\n            </Card>\n        })}\n    </Container>\n}\n\nexport default Cards;","import Events from \"../Events\";\n\nconst Table = (props) => {\n    const Display = [];\n    let Type = null,\n        Pages = Math.ceil(props.Cerner.length / props.DisplayCount);\n\n    if (props.Cerner[0].resourceType) Type = props.Cerner[0].resourceType.toLowerCase();\n\n    // For each entry, see if value has entered-in-error and if not add entry to display...\n    // then set up pages to be viewed.\n    for (let i = 0; i < props.Cerner.length && Display.length < props.DisplayCount; i++) {\n        if (i >= props.DisplayIndex) Display.push(props.Cerner[i]);\n    }\n\n    if (Display.length > 0) console.log(\"Display: \", Display);\n\n    return <div className=\"App-Table\">\n        <table className=\"Table\">\n            <thead>\n                {Events.thead[Type]()}\n            </thead>\n            <tbody>\n                {Display.map((entry, index) => {\n                    return Events.tbody[Type]({\n                        index: index,\n                        entry: entry\n                    });\n                })}\n            </tbody>\n        </table>\n        {Pages > 1 ? (\n            <TableFooter \n                Cerner={props.Cerner}\n                Pages={Pages}\n                DisplayCount={props.DisplayCount}\n                DisplayIndex={props.DisplayIndex}\n                CurrentPage={props.CurrentPage}\n                SetAppState={props.SetAppState}\n                SetParentState={props.SetParentState}\n            />\n        ) : null}\n    </div>\n}\n\nfunction TableFooter(props) {\n    return <div className=\"Footer-Nav\">\n        <div>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: 1, DisplayIndex: 0 })}\n                disabled={props.CurrentPage <= 1}\n            >First</button>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: props.CurrentPage - 1, DisplayIndex: props.DisplayIndex - props.DisplayCount })}\n                disabled={props.CurrentPage <= 1}\n            >Prev</button>\n        </div>\n        <div className=\"Footer-Nav-Link\">\n            <label className=\"Footer-Label\">\n                <input \n                    className=\"Footer-Input\"\n                    type=\"text\" \n                    value={props.CurrentPage}\n                    onChange={event => props.SetAppState({ CurrentPage: event.target.value })}\n                    onKeyPress={event => {\n                        if (event.key === \"Enter\") {\n                            if (props.CurrentPage <= 1) {\n                                props.SetAppState({ DisplayIndex: 0 });\n                                return props.SetAppState({ CurrentPage: 1 });\n                            }\n                            if (props.CurrentPage >= props.Pages) {\n                                props.SetAppState({ DisplayIndex: props.Cerner.length - props.DisplayCount });\n                                return props.SetAppState({ CurrentPage: props.Pages });\n                            }\n                            props.SetAppState({ DisplayIndex: props.DisplayCount * (props.CurrentPage - 1) });\n                        }\n                    }}\n                ></input>\n                {`/${props.Pages}`}\n            </label>\n        </div>\n        <div>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: props.CurrentPage + 1, DisplayIndex: props.DisplayIndex + props.DisplayCount })}\n                disabled={props.CurrentPage >= props.Pages}\n            >Next</button>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: props.Pages, DisplayIndex: props.DisplayCount * (props.Pages - 1) })}\n                disabled={props.CurrentPage >= props.Pages}\n            >Last</button>\n        </div>\n    </div>\n}\n\nexport default Table;","import { withRouter } from 'react-router';\nimport Events from '../../Events';\n\nconst Patient = () => {\n\n    Events.patient();\n    return <div className=\"App-Launch\">\n        <h1>Please wait...</h1>\n    </div>\n};\n\nconst PatientWithRouter = withRouter(Patient);\n\nexport default PatientWithRouter;","import { withRouter } from 'react-router-dom';\nimport Events from '../../Events';\n\nconst Provider = () => {\n\n    Events.provider();\n    return <div className=\"App-Launch\">\n        <h1>Please wait...</h1>\n    </div>\n};\n\nconst ProviderWithRouter = withRouter(Provider);\n\nexport default ProviderWithRouter;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom';\nimport Events from './Events';\nimport Header from './Component/Header';\nimport Cards from './Component/Cards';\nimport Table from './Component/Table';\nimport LaunchPatient from './Component/Launch/LaunchPatient';\nimport LaunchProvider from './Component/Launch/LaunchProvider';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Loading: false,\n      Dropdown: null,\n      Oauth2: null,\n      Patient: null,\n      Cerner: null,\n      CurrentPage: 0,\n      DisplayIndex: 0,\n      DisplayCount: 25,\n      MainIndex: 0,\n      MainArray: [\n        { \n          label: \"Observations\",\n          value: \"Observation\",\n          path: \"/observations\"\n        } , {\n          label: \"Conditions\",\n          value: \"Condition\",\n          path: \"/conditions\"\n        } , {\n          label: \"Medications\",\n          value: \"MedicationStatement\",\n          path: \"/medications\"\n        } , {\n          label: \"Allergies\",\n          value: \"AllergyIntolerance\",\n          path: \"/allergies\"\n        }\n      ],\n      AccountIndex: 0,\n      AccountArray: [\n        { \n          label: \"Account\",\n          value: \"Patient\",\n          path: \"/account\"\n        } , {\n          label: \"Relatives\",\n          value: \"RelatedPerson\",\n          path: \"/relatives\"\n        } , {\n          label: \"Care Plan\",\n          value: \"CarePlan\",\n          path: \"/care-plan\"\n        }\n      ]\n    }\n    this.SetAppState = this.SetAppState.bind(this);\n    this.RedirectRoute = this.RedirectRoute.bind(this);\n  }\n\n  SetAppState(event) {\n    this.setState(event);\n  }\n\n  RedirectRoute(props) {\n    const MainLabels = [],\n      AccountLabels = [],\n      { Oauth2, MainArray, AccountArray } = this.state;\n\n    MainArray.forEach(option => MainLabels.push(option.label));\n    AccountArray.forEach(option => AccountLabels.push(option.label));\n\n    this.setState({ Loading: true });\n    if (AccountLabels.includes(props.option.label)) {\n      Events.client.request({\n        Oauth2: Oauth2,\n        Page: props.option.value,\n        Property: \"AccountIndex\",\n        Value: props.index,\n        SetAppState: this.SetAppState\n      });\n    } else {\n      Events.client.request({\n        Oauth2: Oauth2,\n        Page: props.option.value,\n        Property: \"MainIndex\",\n        Value: props.index,\n        SetAppState: this.SetAppState\n      });\n    }\n    <Redirect to={props.option.path}/>\n  }\n\n  componentDidMount() {\n    const { Cerner } = this.state;\n    if (!Cerner) {\n      Events.client.ready({\n        SetAppState: this.SetAppState\n      });\n      this.setState({ Loading: true });\n    }\n  }\n\n  render() {\n    const {\n      Loading,\n      Dropdown,\n      Oauth2,\n      Patient,\n      Cerner,\n      CurrentPage,\n      DisplayIndex,\n      DisplayCount,\n      MainIndex,\n      MainArray,\n      AccountIndex,\n      AccountArray,\n    } = this.state,\n      AllOptions = MainArray.concat(AccountArray);\n\n    if (Cerner) console.log(\"Cerner: \", Cerner);\n\n    return <div className=\"App\">\n      <Router basename=\"/UMX-DX\">\n        <GetHeader \n          AllOptions={AllOptions}\n          Dropdown={Dropdown}\n          Oauth2={Oauth2}\n          Patient={Patient}\n          Cerner={Cerner}\n          CurrentPage={CurrentPage}\n          DisplayIndex={DisplayIndex}\n          DisplayCount={DisplayCount}\n          MainIndex={MainIndex}\n          MainArray={MainArray}\n          AccountIndex={AccountIndex}\n          AccountArray={AccountArray}\n          SetAppState={this.SetAppState}\n        />\n        <Switch>\n          <Route exact path='/'>\n            {Loading ? (\n              <div className=\"App-Loading\">\n                <h1>Please wait...</h1>\n              </div>\n            ) : (\n              !Oauth2 ? (\n                <div className=\"App-Login\">\n                  <h1>Please Login to Continue</h1>\n                </div>\n              ) : null\n            )}\n          </Route>\n          {AllOptions.map((option, index) => {\n            return <Route key={index} path={option.path}>\n            {Loading ? (\n              <div className=\"App-Loading\">\n                <h1>Please wait...</h1>\n              </div>\n            ) : (\n              !Cerner || Cerner.length === 0 ? (\n                  <div className=\"App-Error\">\n                    <h1>Error Retrieveing Data</h1>\n                  </div>\n              ) : (\n                <Table\n                  Cerner={Cerner}\n                  DisplayCount={DisplayCount}\n                  DisplayIndex={DisplayIndex}\n                  CurrentPage={CurrentPage}\n                  SetAppState={this.SetAppState}\n                />\n              )\n            )}\n            </Route>\n          })}\n          {!Oauth2 ? (\n            <>\n              <Route path=\"/launch-patient\">\n                <LaunchPatient />\n              </Route>\n              <Route path=\"/launch-provider\">\n                <LaunchProvider />\n              </Route> \n            </>\n          ) : null }\n        </Switch>\n        {!Loading && Oauth2 ? (\n          <Cards \n            AllOptions={AllOptions}\n            RedirectRoute={this.RedirectRoute}\n          />\n        ) : null }\n      </Router>\n    </div>\n  }\n};\n\nfunction GetHeader(props) {\n  const MainLabels = [],\n    AccountLabels = [];\n  let includedAccount = false;\n\n  props.MainArray.forEach(option => MainLabels.push(option.label));\n  props.AccountArray.forEach(option => {\n    if (props.Cerner && option.value === props.Cerner[0].resourceType) includedAccount = true;\n    AccountLabels.push(option.label)\n  });\n\n  switch (true) {\n    case includedAccount:\n      return <Header \n        AllOptions={props.AllOptions}\n        Dropdown={props.Dropdown}\n        Oauth2={props.Oauth2}\n        Patient={props.Patient}\n        Cerner={props.Cerner}\n        CurrentPage={props.CurrentPage}\n        DisplayIndex={props.DisplayIndex}\n        DisplayCount={props.DisplayCount}\n        MainLabels={MainLabels}\n        AccountLabels={AccountLabels}\n        PageType=\"Account\"\n        PageIndex={props.AccountIndex}\n        PageArray={props.AccountArray}\n        SetAppState={props.SetAppState}\n      />\n    default:\n      return <Header \n        AllOptions={props.AllOptions}\n        Dropdown={props.Dropdown}\n        Oauth2={props.Oauth2}\n        Patient={props.Patient}\n        Cerner={props.Cerner}\n        CurrentPage={props.CurrentPage}\n        DisplayIndex={props.DisplayIndex}\n        DisplayCount={props.DisplayCount}\n        MainLabels={MainLabels}\n        AccountLabels={AccountLabels}\n        PageType=\"Main\"\n        PageIndex={props.MainIndex}\n        PageArray={props.MainArray}\n        SetAppState={props.SetAppState}\n      />\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nrequire('./index.scss');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}