{"version":3,"sources":["Events.js","Component/Header.js","Component/Cards.js","Component/Table.js","Component/Launch/LaunchPatient.js","Component/Launch/LaunchProvider.js","App.js","reportWebVitals.js","index.js"],"names":["Events","getPatientName","name","entry","find","nameRecord","use","given","join","family","getSystemValue","array","system","str","out","checkSys","c","display","patient","props","FHIR","oauth2","authorize","client_id","scope","iss","redirectUri","catch","console","error","provider","client","ready","then","request","pageLimit","flat","res","SetAppState","Loading","Oauth2","Patient","routeChange","newPage","Cerner","forEach","PrevScope","includes","resourceType","state","Page","response","newRes","addEntry","status","verificationStatus","substance","code","text","push","Property","Value","thead","observation","condition","medicationstatement","allergyintolerance","relatedperson","tbody","issued","Date","toDateString","subject","reference","split","category","index","onset","onsetDateTime","abatement","clinicalStatus","medication","getPath","taken","allergy","criticality","maritalStatus","birthDate","id","gender","SubHeader","className","map","to","onClick","MainIndex","AccountIndex","DisplayCount","DisplayIndex","PageArray","option","i","PageIndex","path","activeClassName","value","PageType","label","onChange","event","parseInt","target","CurrentPage","Header","Dropdown","onMouseOver","AllOptions","Cards","MainLabels","AccountLabels","MainArray","AccountArray","TableFooter","disabled","type","onKeyPress","key","Pages","length","Table","Display","Type","Math","ceil","toLowerCase","log","SetParentState","PatientWithRouter","withRouter","ProviderWithRouter","App","bind","this","setState","concat","basename","GetHeader","exact","LaunchPatient","LaunchProvider","React","Component","includedAccount","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da27dbd4.chunk.js","sourcesContent":["import FHIR from 'fhirclient';\nimport { getPath } from 'fhirclient/lib/lib';\n\nconst Events = {};\n\n// Launch Events\n\nEvents.patient = (props) => {\n    FHIR.oauth2.authorize({\n        client_id: \"efef2e22-0d52-4bfa-ab53-b44456625f2a\",\n        scope: \"user/Patient.read user/Person.read user/Practitioner.read user/RelatedPerson.read patient/AllergyIntolerance.read patient/CarePlan.read patient/Condition.read patient/MedicationStatement.read patient/Observation.read patient/Patient.read patient/Person.read patient/RelatedPerson.read launch/patient online_access openid profile\",\n        iss: \"https://fhir-myrecord.cerner.com/dstu2/ec2458f2-1e24-41c8-b71b-0e701af7583d\",\n        redirectUri: \"https://danielmoffitt54.github.io/UMX-DX/\"\n    }).catch(console.error);\n}\n\nEvents.provider = (props) => {\n    FHIR.oauth2.authorize({\n        client_id: \"4cfb74e7-deb2-4151-9c22-16eba93fd1ec\",\n        scope: \"patient/Patient.read patient/Observation.read launch online_access openid profile\",\n        iss: \"https://fhir-myrecord.cerner.com/dstu2/ec2458f2-1e24-41c8-b71b-0e701af7583d\",\n        redirectUri: \"https://danielmoffitt54.github.io/UMX-DX/\"\n    }).catch(console.error);\n}\n\n// Client Events\nEvents.client = {};\n\nEvents.client.ready = (props) => {\n    // Using the values from the authorize return, perform a request using the props Param value.\n    // Then always set loading state to false, and if successful set Oauth2 to the authorize return and Cerner to the request return.\n    FHIR.oauth2.ready()\n        .then(client => {\n            client.patient.request(\"Patient\", {\n                pageLimit: 0,\n                flat: true\n            }).then(res => {\n                props.SetAppState({ Loading: false, Oauth2: client, Patient: res });\n            }).catch(() => props.SetAppState({ Loading: false }));\n        }).catch(() => props.SetAppState({ Loading: false }));\n}\n\nEvents.client.routeChange = (props) => {\n    // Test to see if the current Cerner state has another route's resource type.\n    // If so, update the Cerner state.\n    let newPage = false;\n    props.Cerner.forEach(entry => {\n        if (props.PrevScope.includes(entry.resourceType)) newPage = true;\n    });\n    if (newPage) {\n        props.SetAppState({ Loading: true });\n        Events.client.request(props);\n    }\n}\n\nEvents.client.request = (props) => {\n    // Using the current Oauth2 state, perform a request for the route's array at a certain index.\n    // Then update the Cerner state, the route's index state, and reset the current display back to 0.\n    const client = FHIR.client(props.Oauth2.state);\n    client.patient.request(props.Page, {\n        pageLimit: 0,\n        flat: true\n    })\n        .then(response => {\n            const newRes = [];\n            let addEntry = true;\n            response.forEach(res => {\n                switch (true) {\n                    default:\n                        addEntry = true;\n                        break;\n                    case (res.status && res.status === \"entered-in-error\"):\n                    case (res.verificationStatus && res.verificationStatus === \"entered-in-error\"):\n                    case (res.substance && res.substance === \"Entered In Error\"):\n                    case (res.code && res.code.text === \"Entered In Error\"):\n                        addEntry = false;\n                        break;\n                }\n                if (addEntry) newRes.push(res);\n            });\n            props.SetAppState({ Loading: false, Cerner: newRes, [props.Property]: props.Value, CurrentPage: 1, DisplayIndex: 0 });\n        }).catch(() => props.SetAppState({ Loading: false, [props.Property]: props.Value, CurrentPage: 1, DisplayIndex: 0 }));\n}\n\n// Table Head Events\nEvents.thead = {};\n\nEvents.thead.observation = () => {\n    return <tr>\n        <th>Issued Date</th>\n        <th>Subject</th>\n        <th>Report</th>\n        <th>Category</th>\n        <th>Status</th>\n    </tr>\n}\n\nEvents.thead.condition = () => {\n    return <tr>\n        <th>Patient</th>\n        <th>Category</th>\n        <th>Report</th>\n        <th>Initial Date</th>\n        <th>Verification Status</th>\n        <th>Clinical Status</th>\n        <th>Abatement Date</th>\n    </tr>\n}\n\nEvents.thead.medicationstatement = () => {\n    return <tr>\n        <th>Patient</th>\n        <th>Medication</th>\n        <th>Dosage</th>\n        <th>Status</th>\n        <th>Taken</th>\n    </tr>\n}\n\nEvents.thead.allergyintolerance = () => {\n    return <tr>\n        <th>Patient</th>\n        <th>Category</th>\n        <th>Substance</th>\n        <th>Criticality</th>\n        <th>Status</th>\n    </tr>\n}\n\nEvents.thead.patient = () => {\n    return <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Gender</th>\n        <th>Birth Date</th>\n        <th>Marital Status</th>\n    </tr>\n}\n\nEvents.thead.relatedperson = () => {\n    return <tr>\n        <th>Patient</th>\n        <th>Person</th>\n        <th>Gender</th>\n        <th>Birth Date</th>\n    </tr>\n}\n\n// Table Body Events\nEvents.tbody = {};\n\nEvents.tbody.observation = (props) => {\n    const issued = new Date(props.entry.issued),\n        report = \"N/A\";\n        // getSystemValue(getPath(props.entry, \"code.coding\") || getPath(props.entry, \"code\"), \"http://snomed.info/sct\", props.entry.code.text || \"Report Unavailable\");\n\n    return <tr key={props.index}>\n        <td>{issued.toDateString() || \"N/A\"}</td>\n        <td>{props.entry.subject.reference.split('/')[1] || \"N/A\"}</td>\n        <td>{report || \"N/A\"}</td>\n        <td>{props.entry.category.text || \"N/A\"}</td>\n        <td>{props.entry.status || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.condition = (props) => {\n    const onset = new Date(props.entry.onsetDateTime),\n        abatement = new Date(props.entry.onsetDateTime);\n\n    return <tr key={props.index}>\n        <td>{props.entry.patient.display || \"N/A\"}</td>\n        <td>{props.entry.category.text || \"N/A\"}</td>\n        <td>{props.entry.code.text || \"N/A\"}</td>\n        <td>{onset.toDateString() || \"N/A\"}</td>\n        <td>{props.entry.verificationStatus || \"N/A\"}</td>\n        <td>{props.entry.clinicalStatus || \"N/A\"}</td>\n        <td>{abatement.toDateString() || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.medicationstatement = (props) => {\n    const medication = getSystemValue(getPath(props.entry, \"medicationCodeableConcept.coding\") || getPath(props.entry, \"medicationCodeableConcept.code.coding\"), \"http://www.nlm.nih.gov/research/umls/rxnorm\", \"Unnamed Medication(TM)\"),\n        taken = getPath(props.entry, \"wasNotTaken\") ? \"No\" : \"Yes\" ;\n\n    return <tr key={props.index}>\n        <td>{props.entry.patient.display || \"N/A\"}</td>\n        <td>{medication || \"N/A\"}</td>\n        <td>{getPath(props.entry, \"dosage.0.text\") || \"N/A\"}</td>\n        <td>{props.entry.status || \"N/A\"}</td>\n        <td>{taken || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.allergyintolerance = (props) => {\n    const allergy = getSystemValue(getPath(props.entry, \"substance.coding\") || getPath(props.entry, \"substance.code.coding\"), \"http://snomed.info/sct\", props.entry.substance.text || \"Unnamed Allergy\"),\n        criticality = props.entry.criticality === \"CRITH\" ? \"High Risk\" : \"-\";\n\n    return <tr>\n        <td>{getPath(props.entry, \"patient.display\") || \"N/A\"}</td>\n        <td>{getPath(props.entry, \"category\") || \"N/A\"}</td>\n        <td>{allergy || \"N/A\"}</td>\n        <td>{criticality || \"N/A\"}</td>\n        <td>{props.entry.status || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.patient = (props) => {\n    const maritalStatus = getSystemValue(getPath(props.entry, \"maritalStatus.coding\") || getPath(props.entry, \"maritalStatus.code.coding\"), \"http://hl7.org/fhir/v3/Marital\", props.entry.maritalStatus.text || \"Unavailable\"),\n        birthDate = new Date(props.entry.birthDate);\n\n    return <tr key={props.index}>\n        <td>{props.entry.id || \"N/A\"}</td>\n        <td>{getPatientName(props.entry.name) || \"N/A\"}</td>\n        <td>{props.entry.gender || \"N/A\"}</td>\n        <td>{birthDate.toDateString() || \"N/A\"}</td>\n        <td>{maritalStatus || \"N/A\"}</td>\n    </tr>\n}\n\nEvents.tbody.relatedperson = (props) => {\n    const birthDate = new Date(props.entry.birthDate);\n\n    return <tr key={props.index}>\n        <td>{props.entry.patient.display || \"N/A\"}</td>\n        <td>{props.entry.name.text || \"N/A\"}</td>\n        <td>{props.entry.gender || \"N/A\"}</td>\n        <td>{birthDate.toDateString() || \"N/A\"}</td>\n    </tr>\n}\n\n// Misc Functions\n\nfunction getPatientName(name = []) {\n    let entry = name.find(nameRecord => nameRecord.use === \"official\") || name[0];\n    if (entry) return entry.given.join(\" \") + \" \" + entry.family;\n    return undefined;\n}\n\nfunction getSystemValue(array = [], system, str) {\n    let out = str;\n    const checkSys = array.find(c => c.system === system);\n    if (checkSys && checkSys.display) {\n        out = checkSys.display;\n    }\n    return out;\n}\n\nexport default Events;","import { NavLink } from 'react-router-dom';\nimport Events from '../Events';\n\nconst Header = (props) => {\n    \n    return <header id=\"Header\" className=\"App-Header\">\n        {!props.Oauth2 ? (\n            <div className=\"Header-Main\">\n                <NavLink \n                    to=\"/\" \n                    className=\"Header-Link\"\n                    onClick={() => props.SetAppState({\n                        Cerner: null,\n                        MainIndex: 0,\n                        AccountIndex: 0,\n                        DisplayCount: 25,\n                        DisplayIndex: 0\n                    })}\n                >UMX-DX App</NavLink>\n                <div className=\"Header-Nav\">\n                    <button\n                        className=\"Header-Link\"\n                        onClick={() => props.SetAppState({ Dropdown: null })}\n                        onMouseOver={() => props.SetAppState({ Dropdown: 'Header-Nav' })}\n                    >Login</button>\n                    {props.Dropdown === 'Header-Nav' ? (\n                        <div className=\"Header-Nav-Dropdown\">\n                            <NavLink \n                                to=\"/launch-patient\" \n                                className=\"Header-Nav-Dropdown-Link\"\n                                activeClassName=\"Header-Nav-Dropdown-Link-Active\"\n                                onClick={() => props.SetAppState({ Dropdown: null })}\n                            >Patient</NavLink>\n                            <NavLink \n                                to=\"/launch-provider\" \n                                className=\"Header-Nav-Dropdown-Link\"\n                                activeClassName=\"Header-Nav-Dropdown-Link-Active\"\n                                onClick={() => props.SetAppState({ Dropdown: null })}\n                            >Provider</NavLink>\n                        </div>\n                    ) : null }\n                </div>\n            </div>\n        ) : (\n            <div className=\"Header-Main\">\n                <NavLink \n                    to=\"/\" \n                    className=\"Header-Link\"\n                    onClick={() => props.SetAppState({\n                        Cerner: null,\n                        MainIndex: 0,\n                        AccountIndex: 0,\n                        DisplayCount: 25,\n                        DisplayIndex: 0\n                    })}\n                >UMX-DX App</NavLink>\n                <div className=\"Header-Nav\">\n                    <button\n                        className=\"Header-Link\"\n                        onClick={() => props.SetAppState({ Dropdown: null })}\n                        onMouseOver={() => props.SetAppState({ Dropdown: 'Header-Nav' })}\n                    >Menu</button>\n                    {props.Dropdown === 'Header-Nav' ? (\n                        <div className=\"Header-Nav-Dropdown\">\n                            {props.AllOptions.map((option, i) => {\n                                return <NavLink key={i}\n                                    to={option.path}\n                                    className=\"Header-Nav-Dropdown-Link\"\n                                    activeClassName=\"Header-Nav-Dropdown-Link-Active\"\n                                    onClick={() => {\n                                        props.SetAppState({ Loading: true, Dropdown: null });\n                                        Events.client.request({\n                                            Oauth2: props.Oauth2,\n                                            Page: option.value,\n                                            Property: `${props.PageType}Index`,\n                                            Value: i,\n                                            SetAppState: props.SetAppState\n                                        });\n                                    }}\n                                >{option.label}</NavLink>\n                            })}\n                            <NavLink \n                                to=\"/\" \n                                className=\"Header-Nav-Dropdown-Link\"\n                                onClick={() => props.SetAppState({\n                                    Dropdown: null,\n                                    Oauth2: null,\n                                    Patient: null,\n                                    Cerner: null,\n                                    MainIndex: 0,\n                                    AccountIndex: 0,\n                                    DisplayCount: 25,\n                                    DisplayIndex: 0\n                                })}\n                            >Log Out</NavLink>\n                        </div>\n                    ) : null }\n                </div>\n            </div>\n        )}\n        {SubHeader(props)}\n    </header>\n};\n\nfunction SubHeader(props) {\n\n    if (!props.Patient && !props.Cerner) return\n    return <div className=\"Header-Subheader\">\n        {props.Patient ? (\n            <table>\n                <thead>\n                    {Events.thead.patient()}\n                </thead>\n                <tbody>\n                    {props.Patient.map((entry, index) => {\n                        return Events.tbody.patient({\n                            index: index,\n                            entry: entry\n                        });\n                    })}\n                </tbody>\n            </table>\n        ) : null }\n        {props.Cerner ? (\n            <div className=\"Subheader-Nav\">\n                <NavLink \n                    to=\"/\" \n                    className=\"Subheader-Nav-Link\"\n                    onClick={() => props.SetAppState({\n                        Cerner: null,\n                        MainIndex: 0,\n                        AccountIndex: 0,\n                        DisplayCount: 25,\n                        DisplayIndex: 0\n                    })}\n                >Back</NavLink>\n                {props.PageArray.map((option, i) => {\n                    if (props.PageIndex === i) return <NavLink key={i} \n                        to={option.path}\n                        className=\"Subheader-Nav-Link\"\n                        activeClassName=\"Subheader-Nav-Link-Active\"\n                        onClick={() => {\n                            props.SetAppState({ Loading: true });\n                            Events.client.request({\n                                Oauth2: props.Oauth2,\n                                Page: option.value,\n                                Property: `${props.PageType}Index`,\n                                Value: i,\n                                SetAppState: props.SetAppState\n                            });\n                        }}\n                    >{option.label}</NavLink>\n                    return <NavLink key={i} \n                        to={option.path}\n                        className=\"Subheader-Nav-Link\"\n                        activeClassName=\"Subheader-Nav-Link-Active\"\n                        onClick={() => {\n                            props.SetAppState({ Loading: true });\n                            Events.client.request({\n                                Oauth2: props.Oauth2,\n                                Page: option.value,\n                                Property: `${props.PageType}Index`,\n                                Value: i,\n                                SetAppState: props.SetAppState\n                            });\n                        }}\n                    >{option.label}</NavLink>\n                })}\n                <div className=\"Subheader-Nav-Link\">\n                    <label className=\"Subheader-Label\">\n                        Count:\n                        <select \n                            className=\"Subheader-Select\"\n                            value={props.DisplayCount} \n                            onChange={event => props.SetAppState({ DisplayCount: parseInt(event.target.value), CurrentPage: 1, DisplayIndex: 0 })}\n                        >\n                            <option value={25}>25</option>\n                            <option value={50}>50</option>\n                            <option value={100}>100</option>\n                        </select>\n                    </label>\n                </div>\n            </div>\n        ) : null }\n    </div>\n\n}\n\nexport default Header;","import Events from '../Events';\n\nconst Cards = (props) => {\n    const MainLabels = [],\n        AccountLabels = [];\n\n    props.MainArray.forEach(option => MainLabels.push(option.label));\n    props.AccountArray.forEach(option => AccountLabels.push(option.label));\n\n    return <div className=\"App-Cards\">\n        {props.AllOptions.map((option, i) => {\n            return <div key={i} \n                className=\"Card\"\n                onClick={() => {\n                    props.SetAppState({ Loading: true });\n                    if (AccountLabels.includes(option.label)) {\n                        Events.client.request({\n                            Oauth2: props.Oauth2,\n                            Page: option.value,\n                            Property: \"AccountIndex\",\n                            Value: i,\n                            SetAppState: props.SetAppState\n                        });\n                    } else {\n                        Events.client.request({\n                            Oauth2: props.Oauth2,\n                            Page: option.value,\n                            Property: \"MainIndex\",\n                            Value: i,\n                            SetAppState: props.SetAppState\n                        });\n                    }\n                }}\n            >{option.label}</div>\n        })}\n    </div>\n}\n\nexport default Cards;","import Events from \"../Events\";\n\nconst Table = (props) => {\n    const Display = [];\n    let Type = null,\n        Pages = Math.ceil(props.Cerner.length / props.DisplayCount);\n\n    if (props.Cerner[0].resourceType) Type = props.Cerner[0].resourceType.toLowerCase();\n\n    // For each entry, see if value has entered-in-error and if not add entry to display...\n    // then set up pages to be viewed.\n    for (let i = 0; i < props.Cerner.length && Display.length < props.DisplayCount; i++) {\n        if (i >= props.DisplayIndex) Display.push(props.Cerner[i]);\n    }\n\n    if (Display.length > 0) console.log(\"Display: \", Display);\n    if (Pages > 0) console.log(`Pages(Current/Total): ${props.CurrentPage}/${Pages}`);\n    if (Pages > 0) console.log(`Index(Current/Total): ${props.DisplayIndex}/${props.Cerner.length}`);\n    if (Pages > 0) console.log(`DisplayCount: ${props.DisplayCount}`);\n\n    return <div className=\"App-Table\">\n        <table className=\"Table\">\n            <thead>\n                {Events.thead[Type]()}\n            </thead>\n            <tbody>\n                {Display.map((entry, index) => {\n                    return Events.tbody[Type]({\n                        index: index,\n                        entry: entry\n                    });\n                })}\n            </tbody>\n        </table>\n        {Pages > 1 ? (\n            <TableFooter \n                Cerner={props.Cerner}\n                Pages={Pages}\n                DisplayCount={props.DisplayCount}\n                DisplayIndex={props.DisplayIndex}\n                CurrentPage={props.CurrentPage}\n                SetAppState={props.SetAppState}\n                SetParentState={props.SetParentState}\n            />\n        ) : null}\n    </div>\n}\n\nfunction TableFooter(props) {\n    return <div className=\"Footer-Nav\">\n        <div>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: 1, DisplayIndex: 0 })}\n                disabled={props.CurrentPage <= 1}\n            >First</button>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: props.CurrentPage - 1, DisplayIndex: props.DisplayIndex - props.DisplayCount })}\n                disabled={props.CurrentPage <= 1}\n            >Prev</button>\n        </div>\n        <div className=\"Footer-Nav-Link\">\n            <label className=\"Footer-Label\">\n                <input \n                    className=\"Footer-Input\"\n                    type=\"text\" \n                    value={props.CurrentPage}\n                    onChange={event => props.SetAppState({ CurrentPage: event.target.value })}\n                    onKeyPress={event => {\n                        if (event.key === \"Enter\") {\n                            if (props.CurrentPage <= 1) {\n                                props.SetAppState({ DisplayIndex: 0 });\n                                return props.SetAppState({ CurrentPage: 1 });\n                            }\n                            if (props.CurrentPage >= props.Pages) {\n                                props.SetAppState({ DisplayIndex: props.Cerner.length - props.DisplayCount });\n                                return props.SetAppState({ CurrentPage: props.Pages });\n                            }\n                            props.SetAppState({ DisplayIndex: props.DisplayCount * (props.CurrentPage - 1) });\n                        }\n                    }}\n                ></input>\n                {`/${props.Pages}`}\n            </label>\n        </div>\n        <div>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: props.CurrentPage + 1, DisplayIndex: props.DisplayIndex + props.DisplayCount })}\n                disabled={props.CurrentPage >= props.Pages}\n            >Next</button>\n            <button\n                className=\"Footer-Nav-Link\"\n                onClick={() => props.SetAppState({ CurrentPage: props.Pages, DisplayIndex: props.DisplayCount * (props.Pages - 1) })}\n                disabled={props.CurrentPage >= props.Pages}\n            >Last</button>\n        </div>\n    </div>\n}\n\nexport default Table;","import { withRouter } from 'react-router';\nimport Events from '../../Events';\n\nconst Patient = () => {\n\n    Events.patient();\n    return <div className=\"App-Launch\">\n        <h1>Please wait...</h1>\n    </div>\n};\n\nconst PatientWithRouter = withRouter(Patient);\n\nexport default PatientWithRouter;","import { withRouter } from 'react-router-dom';\nimport Events from '../../Events';\n\nconst Provider = () => {\n\n    Events.provider();\n    return <div className=\"App-Launch\">\n        <h1>Please wait...</h1>\n    </div>\n};\n\nconst ProviderWithRouter = withRouter(Provider);\n\nexport default ProviderWithRouter;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Events from './Events';\nimport Header from './Component/Header';\nimport Cards from './Component/Cards';\nimport Table from './Component/Table';\nimport LaunchPatient from './Component/Launch/LaunchPatient';\nimport LaunchProvider from './Component/Launch/LaunchProvider';\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Loading: false,\n      Dropdown: null,\n      Oauth2: null,\n      Patient: null,\n      Cerner: null,\n      CurrentPage: 0,\n      DisplayIndex: 0,\n      DisplayCount: 25,\n      MainIndex: 0,\n      MainArray: [\n        { \n          label: \"Observations\",\n          value: \"Observation\",\n          path: \"/observations\"\n        } , {\n          label: \"Conditions\",\n          value: \"Condition\",\n          path: \"/conditions\"\n        } , {\n          label: \"Medications\",\n          value: \"MedicationStatement\",\n          path: \"/medications\"\n        } , {\n          label: \"Allergies\",\n          value: \"AllergyIntolerance\",\n          path: \"/allergies\"\n        }\n      ],\n      AccountIndex: 0,\n      AccountArray: [\n        { \n          label: \"Account\",\n          value: \"Patient\",\n          path: \"/account\"\n        } , {\n          label: \"Relatives\",\n          value: \"RelatedPerson\",\n          path: \"/relatives\"\n        } , {\n          label: \"Care Plan\",\n          value: \"CarePlan\",\n          path: \"/care-plan\"\n        }\n      ]\n    }\n    this.SetAppState = this.SetAppState.bind(this);\n  }\n\n  SetAppState(event) {\n    this.setState(event);\n  }\n\n  componentDidMount() {\n    const { Cerner } = this.state;\n    if (!Cerner) {\n      Events.client.ready({\n        SetAppState: this.SetAppState\n      });\n      this.setState({ Loading: true });\n    }\n  }\n\n  render() {\n    const {\n      Loading,\n      Dropdown,\n      Oauth2,\n      Patient,\n      Cerner,\n      CurrentPage,\n      DisplayIndex,\n      DisplayCount,\n      MainIndex,\n      MainArray,\n      AccountIndex,\n      AccountArray,\n    } = this.state,\n      AllOptions = MainArray.concat(AccountArray);\n\n    if (Cerner) console.log(\"Cerner:\", Cerner);\n\n    return <div className=\"App\">\n      <Router basename=\"/UMX-DX\">\n        <GetHeader \n          AllOptions={AllOptions}\n          Dropdown={Dropdown}\n          Oauth2={Oauth2}\n          Patient={Patient}\n          Cerner={Cerner}\n          CurrentPage={CurrentPage}\n          DisplayIndex={DisplayIndex}\n          DisplayCount={DisplayCount}\n          MainIndex={MainIndex}\n          MainArray={MainArray}\n          AccountIndex={AccountIndex}\n          AccountArray={AccountArray}\n          SetAppState={this.SetAppState}\n        />\n        <Switch>\n          <Route exact path='/'>\n            {Loading ? (\n              <div className=\"App-Loading\">\n                <h1>Please wait...</h1>\n              </div>\n            ) : (\n              !Oauth2 ? (\n                <div className=\"App-Login\">\n                  <h1>Please Login to Continue</h1>\n                </div>\n              ) : null\n            )}\n          </Route>\n          {AllOptions.map((option, index) => {\n            return <Route key={index} path={option.path}>\n            {Loading ? (\n              <div className=\"App-Loading\">\n                <h1>Please wait...</h1>\n              </div>\n            ) : (\n              !Cerner || Cerner.length === 0 ? (\n                  <div className=\"App-Error\">\n                    <h1>Error Retrieveing Data</h1>\n                  </div>\n              ) : (\n                <Table\n                  Cerner={Cerner}\n                  DisplayCount={DisplayCount}\n                  DisplayIndex={DisplayIndex}\n                  CurrentPage={CurrentPage}\n                  SetAppState={this.SetAppState}\n                />\n              )\n            )}\n            </Route>\n          })}\n          {!Oauth2 ? (\n            <>\n              <Route path=\"/launch-patient\">\n                <LaunchPatient />\n              </Route>\n              <Route path=\"/launch-provider\">\n                <LaunchProvider />\n              </Route> \n            </>\n          ) : null }\n        </Switch>\n      </Router>\n      {Oauth2 ? (\n        <Cards \n          Oauth2={Oauth2}\n          AllOptions={AllOptions}\n          MainArray={MainArray}\n          AccountArray={AccountArray}\n          SetAppState={this.SetAppState}\n        />\n      ) : null }\n    </div>\n  }\n};\n\nfunction GetHeader(props) {\n  const MainLabels = [],\n    AccountLabels = [];\n  let includedAccount = false;\n\n  props.MainArray.forEach(option => MainLabels.push(option.label));\n  props.AccountArray.forEach(option => {\n    if (props.Cerner && option.value === props.Cerner[0].resourceType) includedAccount = true;\n    AccountLabels.push(option.label)\n  });\n\n  switch (true) {\n    case includedAccount:\n      return <Header \n        AllOptions={props.AllOptions}\n        Dropdown={props.Dropdown}\n        Oauth2={props.Oauth2}\n        Patient={props.Patient}\n        Cerner={props.Cerner}\n        CurrentPage={props.CurrentPage}\n        DisplayIndex={props.DisplayIndex}\n        DisplayCount={props.DisplayCount}\n        MainLabels={MainLabels}\n        AccountLabels={AccountLabels}\n        PageType=\"Account\"\n        PageIndex={props.AccountIndex}\n        PageArray={props.AccountArray}\n        SetAppState={props.SetAppState}\n      />\n    default:\n      return <Header \n        AllOptions={props.AllOptions}\n        Dropdown={props.Dropdown}\n        Oauth2={props.Oauth2}\n        Patient={props.Patient}\n        Cerner={props.Cerner}\n        CurrentPage={props.CurrentPage}\n        DisplayIndex={props.DisplayIndex}\n        DisplayCount={props.DisplayCount}\n        MainLabels={MainLabels}\n        AccountLabels={AccountLabels}\n        PageType=\"Main\"\n        PageIndex={props.MainIndex}\n        PageArray={props.MainArray}\n        SetAppState={props.SetAppState}\n      />\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}